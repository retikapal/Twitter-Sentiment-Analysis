# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jxJFROuRMcyEWprp8QU-bnw2B_cH5s_C
"""

! pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("dataset is extracted")

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data processing

"""

# loading data fron csv file to pandas dataframe
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

#checking the number of rows and columne
twitter_data.shape

#printing the first 5 rows of the dataframe
twitter_data.head()

#naming the col and reading the dataset again
columne_names = ['target','id','date','flag','user','text']
twitter_data = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names = columne_names, encoding = 'ISO-8859-1')

twitter_data.shape

twitter_data.head()

#counting the number of missing values in the dataset
twitter_data.isnull().sum()

#checking the distribution of target columne
twitter_data['target'].value_counts()

#convert the target 4 to 1
twitter_data.replace({'target':{4:1}}, inplace=True )

twitter_data['target'].value_counts()

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content) #remove everthing which is not in a-z or A-Z
  stemmed_content =  stemmed_content.lower()
  stemmed_content =  stemmed_content.split() #split all the words in tweet and add to list
  stemmed_content = [port_stem.stem(word) for word in  stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return  stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

#separting data and labels
X = twitter_data['stemmed_content'].values
Y = twitter_data['target'].values

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.2, stratify=Y, random_state=2)

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

model = LogisticRegression(max_iter = 1000)

model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on the training data: ',training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on the test data: ',test_data_accuracy)

import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

X_new = X_test[200]
print(Y_test[200])

prediction = loaded_model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print('Negaive Tweet')
else:
  print('Positive Tweet')